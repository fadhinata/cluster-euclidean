-- Script was generated by Devart dbForge Studio Express for MySQL, Version 5.0.76.0
-- Product home page: http://www.devart.com/dbforge/mysql/studio
-- Script date 11/10/2014 09:42:15
-- Server version: 5.5.27
-- Client version: 4.1

-- 
-- Disable foreign keys
-- 
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

-- 
-- Set character set the client will use to send SQL statements to the server
--
SET NAMES 'utf8';

-- 
-- Set default database
--
USE studentdb;

--
-- Definition for table t_student
--
DROP TABLE IF EXISTS t_student;
CREATE TABLE t_student (
  student_id BIGINT(20) NOT NULL AUTO_INCREMENT,
  name VARCHAR(100) NOT NULL,
  PRIMARY KEY (student_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table t_student_question_mapping
--
DROP TABLE IF EXISTS t_student_question_mapping;
CREATE TABLE t_student_question_mapping (
  student_question_mapping_id BIGINT(20) NOT NULL AUTO_INCREMENT,
  student_id BIGINT(20) NOT NULL,
  question_number INT(11) NOT NULL,
  score DOUBLE NOT NULL,
  PRIMARY KEY (student_question_mapping_id),
  UNIQUE INDEX student_question_mapping_idx (question_number, student_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 458
AVG_ROW_LENGTH = 1820
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

--
-- Definition for table t_temp_calculation_data
--
DROP TABLE IF EXISTS t_temp_calculation_data;
CREATE TABLE t_temp_calculation_data (
  calculation_data_id BIGINT(20) NOT NULL AUTO_INCREMENT,
  data_name VARCHAR(50) NOT NULL,
  data_1 DOUBLE DEFAULT NULL,
  data_2 DOUBLE DEFAULT NULL,
  data_3 DOUBLE DEFAULT NULL,
  data_4 DOUBLE DEFAULT NULL,
  data_5 DOUBLE DEFAULT NULL,
  PRIMARY KEY (calculation_data_id)
)
ENGINE = INNODB
AUTO_INCREMENT = 1
CHARACTER SET latin1
COLLATE latin1_swedish_ci;

DELIMITER $$

--
-- Definition for procedure p_calculate_euclidean_distance_student
--
DROP PROCEDURE IF EXISTS p_calculate_euclidean_distance_student$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE p_calculate_euclidean_distance_student()
BEGIN
                               
    -- Clear data temporary
    DELETE FROM t_temp_calculation_data;
    
    -- Insert data score grouped by question
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2, data_3, data_4)
    SELECT 'SCORE PER QUESTION', A.question_number,
        SUM(A.score) AS score_total, 
        AVG(A.score) AS score_mean, 
        SQRT(((SUM(A.score) - AVG(A.score)) * (SUM(A.score) - AVG(A.score))) / (COUNT(DISTINCT(A.student_id)) - 1)) AS deviation_standart 
    FROM t_student_question_mapping A
    GROUP BY A.question_number;
    
    -- Insert data score grouped by student
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2)
    SELECT 'SCORE PER STUDENT', 
        A.student_id AS student_id, 
        SUM(A.score) AS student_total_score
    FROM t_student_question_mapping A
    GROUP BY A.student_id;
    
    -- Calculate  and insert standart score
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2, data_3)
    SELECT 'STANDART SCORE', 
        A.data_1 AS student_id, 
        B.question_num AS question_num, 
        ((A.data_2 - B.mean)/B.deviation_standart) AS standart_score
    FROM t_temp_calculation_data A, 
    (SELECT data_1 AS question_num, data_3 AS mean, data_4 AS deviation_standart FROM t_temp_calculation_data WHERE data_name = 'SCORE PER QUESTION') B
    WHERE A.data_name = 'SCORE PER STUDENT';
    
    -- Calculate and insert eculidean distance
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2)
    SElECT 'EUCLIDEAN DISTANCE', 
        A.data_1 AS student_id,                                                                                                       
        (((MAX(A.data_3) - MIN(A.data_3)) * (MAX(A.data_3) - MIN(A.data_3))) *  COUNT(A.data_1)) AS euclidean_distance
    FROM t_temp_calculation_data A                                                                                                   
    WHERE A.data_name = 'STANDART SCORE'
    GROUP BY A.data_1;
    
    -- Return the result: euclidean distance
    SELECT 
        A.data_1 AS student_id,
        B.name AS student_name,
        A.data_2 AS euclidean_distance
    FROM t_temp_calculation_data A
    INNER JOIN t_student B ON B.student_id = A.data_1
    WHERE A.data_name = 'EUCLIDEAN DISTANCE';
    
    DELETE FROM t_temp_calculation_data;

END
$$

--
-- Definition for procedure p_calculate_standart_score_question_per_student
--
DROP PROCEDURE IF EXISTS p_calculate_standart_score_question_per_student$$
CREATE DEFINER = 'root'@'localhost'
PROCEDURE p_calculate_standart_score_question_per_student()
BEGIN
    
    -- Clear data temporary
    DELETE FROM t_temp_calculation_data;
    
    -- Insert data score grouped by question
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2, data_3, data_4)
    SELECT 'SCORE PER QUESTION', A.question_number,
        SUM(A.score) AS score_total, 
        AVG(A.score) AS score_mean, 
        SQRT(((SUM(A.score) - AVG(A.score)) * (SUM(A.score) - AVG(A.score))) / (COUNT(DISTINCT(A.student_id)) - 1)) AS deviation_standart 
    FROM t_student_question_mapping A
    GROUP BY A.question_number;
    
    -- Insert data score grouped by student
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2)
    SELECT 'SCORE PER STUDENT', 
        A.student_id AS student_id, 
        SUM(A.score) AS student_total_score
    FROM t_student_question_mapping A
    GROUP BY A.student_id;
    
    -- Calculate and insert standart score
    INSERT INTO t_temp_calculation_data (data_name, data_1, data_2, data_3)
    SELECT 'STANDART SCORE', 
        A.data_1 AS student_id, 
        B.question_num AS question_num, 
        ((A.data_2 - B.mean)/B.deviation_standart) AS standart_score
    FROM t_temp_calculation_data A, 
    (SELECT data_1 AS question_num, data_3 AS mean, data_4 AS deviation_standart FROM t_temp_calculation_data WHERE data_name = 'SCORE PER QUESTION') B
    WHERE A.data_name = 'SCORE PER STUDENT';
    
    -- Return the result: standart score
    SElECT 
        A.data_1 AS student_id, 
        B.name AS student_name, 
        A.data_2 AS question_num, 
        A.data_3 AS standart_score
    FROM t_temp_calculation_data A
    INNER JOIN t_student B ON B.student_id = A.data_1
    WHERE A.data_name = 'STANDART SCORE';
    
    DELETE FROM t_temp_calculation_data;

END
$$

DELIMITER ;

-- 
-- Enable foreign keys
-- 
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;